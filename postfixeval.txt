#include<stdio.h>
#include<ctype.h>
#define size 5
int top=-1;
int stack[size];
void push(char c)
{
    if(top==size-1)
        return;
    stack[++top]=c;
}
int pop()
{
    if(top==-1)
        return -1;
    else
        return stack[top--];
}
void valid(char p[])
{
    int count=0;
    if(p[0]=='+'||p[0]=='-'||p[0]=='*'||p[0]=='/'||p[1]=='+'||p[1]=='/'||p[1]=='*'||p[1]=='-')
    {
        printf("\nInvalid expression:expression can't have operator in 1st or 2nd pos");
        exit(0);
    }
    for(int i=0;p[i]!='\0';i++)
    {
        if(p[i]=='('||p[i]==')'||p[i]=='['||p[i]==']'||p[i]=='{'||p[i]=='}')
            {
                printf("\nInvalid expression:expression can't have brackets");
                exit(0);
            }
            else if(isdigit(p[i]))
                count++;
            else if(p[i]=='+'||p[i]=='-'||p[i]=='*'||p[i]=='/')
                count--;
            else
            {
                 printf("\nInvalid expression:expression can have only digits and valid operators");
                exit(0);
            }
    }
    if(count!=1)
    {
         printf("\nInvalid expression:expression has wrong no. of operators and operands");
        exit(0);
    }
}
int eval(char p[])
{
    for(int i=0;p[i]!='\0';i++)
    {
        if(isdigit(p[i]))
            push(p[i]-'0');
        else
        {
            int a=pop();
            int b=pop();
            switch(p[i])
            {
                case '+':push(b+a);
                        break;
                case '-':push(b-a);
                        break;
                case '/':push(b/a);
                        break;
                case '*':push(b*a);
                        break;
            }
        }
    }
    return pop();
}
void main()
{


    printf("Enter postfix exp:");
    char p[20];
    for(int i=0;i<size;i++)
        scanf("%c",&p[i]);
    valid(p);
    printf("\nThe result=%d",eval(p));
}
